<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.winter.dao.MeetingMapper">
  <resultMap id="BaseResultMap" type="com.winter.domain.Meeting">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="meeting_name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="meeting_intro" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="room_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="status" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="master_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="start_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="end_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>

  <resultMap id="UserAccessInfo" type="com.winter.vo.UserAccessInfo">
    <result column="user_id" property="userId" />
    <result column="username" property="userName" />
    <result column="avatar_url" property="avatarUrl" />
    <result column="face_data" property="faceData" />
  </resultMap>

  <sql id="Base_Column_List">
    id, meeting_name, meeting_intro, room_id, status, master_id, start_time, end_time,
    create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from smart_meeting
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from smart_meeting
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.winter.domain.Meeting">
    insert into smart_meeting (id, meeting_name, meeting_intro, 
      room_id, status, master_id, 
      start_time, end_time, create_time, 
      update_time)
    values (#{id,jdbcType=INTEGER}, #{meetingName,jdbcType=VARCHAR}, #{meetingIntro,jdbcType=VARCHAR}, 
      #{roomId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{masterId,jdbcType=INTEGER}, 
      #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, now(),
      now())
  </insert>
  <insert id="insertSelective" parameterType="com.winter.domain.Meeting">
    insert into smart_meeting
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="meetingName != null">
        meeting_name,
      </if>
      <if test="meetingIntro != null">
        meeting_intro,
      </if>
      <if test="roomId != null">
        room_id,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="masterId != null">
        master_id,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="endTime != null">
        end_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="meetingName != null">
        #{meetingName,jdbcType=VARCHAR},
      </if>
      <if test="meetingIntro != null">
        #{meetingIntro,jdbcType=VARCHAR},
      </if>
      <if test="roomId != null">
        #{roomId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="masterId != null">
        #{masterId,jdbcType=INTEGER},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.winter.domain.Meeting">
    update smart_meeting
    <set>
      <if test="meetingName != null">
        meeting_name = #{meetingName,jdbcType=VARCHAR},
      </if>
      <if test="meetingIntro != null">
        meeting_intro = #{meetingIntro,jdbcType=VARCHAR},
      </if>
      <if test="roomId != null">
        room_id = #{roomId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="masterId != null">
        master_id = #{masterId,jdbcType=INTEGER},
      </if>
      <if test="startTime != null">
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.winter.domain.Meeting">
    update smart_meeting
    set meeting_name = #{meetingName,jdbcType=VARCHAR},
      meeting_intro = #{meetingIntro,jdbcType=VARCHAR},
      room_id = #{roomId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      master_id = #{masterId,jdbcType=INTEGER},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getMeetingByRoomId" resultMap="BaseResultMap" resultType="list" parameterType="map">
    select
    <include refid="Base_Column_List"/>
    from smart_meeting
    where room_id = #{roomId}
    <if test="flag != null">
      and DATE_SUB(CURDATE(), INTERVAL 3 DAY) &lt;= start_time
    </if>
  </select>

  <select id="getMeetingsOngoing" parameterType="map" resultMap="BaseResultMap" resultType="list">
    select
    smart_meeting.id, meeting_name, meeting_intro, room_id, status, master_id, start_time, end_time,
    smart_meeting.create_time, smart_meeting.update_time
    from smart_meeting, meeting_user
    where meeting_user.user_id = #{userId}
    and
    smart_meeting.id = meeting_user.meeting_id
    and
    (smart_meeting.status = 2 or smart_meeting.status = 3)
  </select>

  <select id="getMeetingsFinished" parameterType="map" resultMap="BaseResultMap" resultType="list">
    select
    smart_meeting.id, meeting_name, meeting_intro, room_id, status, master_id, start_time, end_time,
    smart_meeting.create_time, smart_meeting.update_time
    from smart_meeting, meeting_user
    where meeting_user.user_id = #{userId}
    and
    smart_meeting.id = meeting_user.meeting_id
    and
    smart_meeting.status = 1
  </select>

  <select id="whetherBook" parameterType="map" resultType="int">
    select count(1)
    from smart_meeting
    where room_id = #{roomId} and status = 3
    and (#{startTime} >= start_time and #{startTime} &lt;= end_time)
    or (#{endTime} >= start_time and #{endTime} &lt;= end_time)
  </select>

  <insert id="bookMeeting" parameterType="com.winter.domain.Meeting" useGeneratedKeys="true" keyProperty="id">
    insert into smart_meeting (id, meeting_name, meeting_intro,
      room_id, status, master_id,
      start_time, end_time, create_time,
      update_time)
    values (#{id,jdbcType=INTEGER}, #{meetingName,jdbcType=VARCHAR}, #{meetingIntro,jdbcType=VARCHAR},
      #{roomId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{masterId,jdbcType=INTEGER},
      #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, now(),
      now())
  </insert>

  <select id="getMeetingMasterId" resultType="integer" parameterType="integer">
    select master_id
    from smart_meeting
    where id = #{meetingId}
  </select>

  <update id="setMeetingStatus" parameterType="integer">
    update smart_meeting
    set status = #{status}
    where id = #{meetingId}
  </update>

  <select id="getAllUserByMeetingId" parameterType="integer" resultType="com.winter.vo.UserAccessInfo" resultMap="UserAccessInfo">
    select  meeting_user.user_id, smart_user.username, smart_user.avatar_url, smart_user.face_data
    from smart_user,meeting_user
    where meeting_user.meeting_id = #{meetingId}
    and smart_user.id = meeting_user.user_id
  </select>

  <select id="getAccessMeeting" resultType="list" parameterType="integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from smart_meeting
    where room_id = #{roomId}
    and end_time >= now()
  </select>

  <update id="updateAllMeeting">
    update smart_meeting
    set status = 1
    where end_time &lt; now()
  </update>

    <update id="updateAllMeetingOngoing">
      update smart_meeting
      set status = 2
      where start_time &lt;= now() and end_time >= now()
    </update>

  <select id="getRoomIdByMeetingId" resultType="integer" parameterType="integer">
    select room_id
    from smart_meeting
    where id = #{meetingId}
  </select>

  <update id="editNote" parameterType="map">
    update meeting_user
    set notes = #{note}
    where meeting_id = #{meetingId}
    and user_id = #{userId}
  </update>

  <select id="getMeetingNote" resultType="string" parameterType="map">
    select notes
    from meeting_user
    where meeting_id = #{meetingId}
    and user_id = #{userId}
  </select>

  <select id="getPeopleIds" resultType="integer" parameterType="integer">
    select user_id
    from meeting_user
    where meeting_id = #{meetingId}
  </select>
</mapper>