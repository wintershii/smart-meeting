<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.winter.dao.UserMeetingMapper">
  <resultMap id="BaseResultMap" type="com.winter.domain.UserMeeting">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="meeting_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="user_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="user_status" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>

    <resultMap id="UserStatus" type="com.winter.vo.UserStatus">
        <result column="user_id" property="userId" />
        <result column="username" property="username" />
        <result column="avatar_url" property="avatarUrl" />
        <result column="user_status" property="userStatus" />
    </resultMap>

  <sql id="Base_Column_List">
    id, meeting_id, user_id, user_status, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from meeting_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from meeting_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.winter.domain.UserMeeting">
    insert into meeting_user (id, meeting_id, user_id, 
      user_status, create_time, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{meetingId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{userStatus,jdbcType=INTEGER}, now(), now()
      )
  </insert>
  <insert id="insertSelective" parameterType="com.winter.domain.UserMeeting">
    insert into meeting_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="meetingId != null">
        meeting_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="userStatus != null">
        user_status,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="meetingId != null">
        #{meetingId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userStatus != null">
        #{userStatus,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.winter.domain.UserMeeting">
    update meeting_user
    <set>
      <if test="meetingId != null">
        meeting_id = #{meetingId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="userStatus != null">
        user_status = #{userStatus,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.winter.domain.UserMeeting">
    update meeting_user
    set meeting_id = #{meetingId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      user_status = #{userStatus,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <select id="getPeopleNum" parameterType="integer" resultType="int">
    select count(1)
    from meeting_user
    where meeting_id = #{meetingId}
  </select>

  <select id="getUserStatus" parameterType="integer" resultMap="UserStatus" resultType="list">
    select user_id, username,avatar_url, user_status
    from meeting_user ,smart_user
    where meeting_user.meeting_id = #{meetingId}
    and
    meeting_user.user_id = smart_user.id
  </select>

    <select id="getOneStatusByUserAndMeeting" resultType="integer" parameterType="map">
        select user_status
        from meeting_user
        where user_id = #{userId}
        and meeting_id = #{meetingId}
    </select>

    <select id="checkExist" parameterType="map" resultType="int">
        select count(1)
        from meeting_user
        where meeting_id = #{meetingId}
        and user_id = #{userId}
    </select>

  <update id="uploadUserMeetingStatus" parameterType="map">
    update meeting_user
    set user_status = #{userStatus}
    where meeting_id = #{meetingId}
    and user_id = #{userId}
  </update>

  <delete id="deleteByMeetingId" parameterType="integer">
    delete from
    meeting_user
    where meeting_id = #{meetingId}
  </delete>

  <update id="applyLeave" parameterType="map">
    update meeting_user
    set user_status = 4
    where user_id = #{userId}
    and meeting_id = #{meetingId}
  </update>
</mapper>