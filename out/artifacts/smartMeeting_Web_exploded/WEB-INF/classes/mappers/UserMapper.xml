<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.winter.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.winter.domain.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="sex" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="role" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="phone" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="email" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="avatar_url" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="face_url" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>

  <resultMap id="UserAvatarMap" type="com.winter.vo.UserAvatarInfo">
      <result column="id" property="userId" />
      <result column="username" property="username" />
      <result column="avatar_url" property="avatarUrl" />
  </resultMap>

  <resultMap id="ResultMapWithBLOBs" type="com.winter.domain.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="sex" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="role" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="phone" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="email" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="avatar_url" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="face_url" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="face_data" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    id, username, password, sex, role, phone, email, avatar_url, face_url, create_time, 
    update_time
  </sql>
  <sql id="Blob_Column_List">
    face_data
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from smart_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from smart_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.winter.domain.User">
    insert into smart_user (id, username, password, 
      sex, role, phone, email, 
      avatar_url, face_url, create_time, 
      update_time, face_data)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{sex,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER}, #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{avatarUrl,jdbcType=VARCHAR}, #{faceUrl,jdbcType=VARCHAR}, now(),
      now(), #{faceData,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.winter.domain.User">
    insert into smart_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="role != null">
        role,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="avatarUrl != null">
        avatar_url,
      </if>
      <if test="faceUrl != null">
        face_url,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="faceData != null">
        face_data,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null">
        #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="faceUrl != null">
        #{faceUrl,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="faceData != null">
        #{faceData,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.winter.domain.User">
    update smart_user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        role = #{role,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null">
        avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="faceUrl != null">
        face_url = #{faceUrl,jdbcType=VARCHAR},
      </if>

        update_time = now(),

      <if test="faceData != null">
        face_data = #{faceData,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.winter.domain.User">
    update smart_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      role = #{role,jdbcType=INTEGER},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      face_url = #{faceUrl,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      face_data = #{faceData,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.winter.domain.User">
    update smart_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      role = #{role,jdbcType=INTEGER},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      face_url = #{faceUrl,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="checkPhone" parameterType="string" resultType="int">
    select count(1)
    from smart_user
    where phone = #{phone}
  </select>

  <select id="checkEmail" parameterType="string" resultType="int">
    select count(1)
    from smart_user
    where email = #{email}
  </select>

  <select id="selectLogin" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    id, username, password, sex, role , phone, email, face_data ,avatar_url, face_url, create_time, update_time
    from smart_user
    where phone = #{phone}
    and password = #{password}
  </select>

  <select id="getAll" resultType="list" resultMap="ResultMapWithBLOBs">
    select
    id, username, password, sex, role , phone, email, face_data ,avatar_url, face_url, create_time, update_time
    from smart_user
  </select>

  <select id="selectByPhone" parameterType="string" resultMap="ResultMapWithBLOBs">
    select
    id, username, password, sex, role , phone, email, face_data ,avatar_url, face_url, create_time, update_time
    from smart_user
    where phone = #{phone}
  </select>

  <update id="updateInfo" parameterType="map">
    update smart_user
    <set>
      phone = #{phone},
      sex = #{sex},
      email = #{email},
      avatar_url = #{avatarUrl},
      update_time = now()
    </set>
    where id = #{id}
  </update>

  <update id="updateInfoWithoutAvatar" parameterType="map">
    update smart_user
    <set>
      phone = #{phone},
      sex = #{sex},
      email = #{email},
      update_time = now()
    </set>
    where id = #{id}
  </update>

  <select id="getNameById" parameterType="integer" resultType="string">
    select username
    from smart_user
    where id = #{userId}
  </select>

    <select id="getUserPassword" resultType="string" parameterType="integer">
        select password
        from smart_user
        where id = #{userId}
    </select>

    <update id="updatePassword" parameterType="map">
        update smart_user
        set password = #{newPassword}
        where id = #{userId}
    </update>

  <update id="forgetPassword" parameterType="map">
    update smart_user
    set password = #{newPassword}
    where phone = #{phoneNumber}
  </update>

  <select id="getPhoneById" parameterType="integer" resultType="string">
    select phone
    from smart_user
    where id = #{id}
  </select>

  <select id="getUserAvatarInfo" parameterType="integer" resultType="list" resultMap="UserAvatarMap">
    select id, username, avatar_url
    from smart_user
    where id = #{userId}
  </select>

  <delete id="deleteUser" parameterType="integer">
    delete from smart_user
    where id = #{userId}
  </delete>
</mapper>